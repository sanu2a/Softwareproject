class Math {
    float pi_float_value = 3.1415927;

    float getPie(){
        return pi_float_value;
    }
    float fact(float n){
        float i= n - 1.0;
        float fct = n;
        if(n == 0.0){
            return 1.0;
        }
        if(n==1.0){
            return 1.0;
        }
        while( i>=1.0){
            fct=fct*i;
            i = i - 1.0;
        }
        return fct;
    }
    float puiss(float x, int n){
        int i=0;
        int j=0;
        float res=1.0;
        if(n==0){
            // rdinaha float
            return 1.0;
        }
        else if(n==1){
            return x;
        }
        else if(n<0){
            return puiss(1/x,-n);
        }
        while(j<n){
            res=res*x;
            j=j+1;
            }
        return res;
    }    

float abs(float x){
    if(x<0.0){
        return -x;
    }
    else{
        return x;
    }
}

float sqrt(float x) {
    float r = x, t = 0.0;
    while (t != r) {
        t = r;
        r = (x / r + r) / 2;
    }
    return r;
}

float getAbs(float x){
        return abs(x);
    }

    float cos(float f) {
        float result = 0.0;
        int i = 0;
        float a1=0.0;
        float a2=0.0;
        float a3=0.0;
        if (f < 0.0) {//f<0
            return cos(-f);
        } else {
            if (f == 0.0) {
                return 1.0;
            } else {
                if (f <= pi_float_value / 4) {//[0;pie/4]
                    while (i <= 10) {
                        a1 = puiss(-1.0, i);
                        a2 = puiss(f, 2 * i);
                        a3 = fact(2 * i);
                        result = result + (a1 * a2) / a3;
                        i = i + 1;
                    }
                } else {
                    if (f <= this.getPie() / 2 && f > this.getPie() / 4) {
                        return sin(this.getPie() / 2 - f);
                    } else {
                        if (f > this.getPie() / 2 && f <= 2 * this.getPie()) {
                            return -cos(this.getPie() - f);
                        } else {
                            if (f > 2 * this.getPie()) {
                                f = f - 2 * this.getPie();
                                return cos(f);
                            }
                        }
                    }
                }
            }
        }
        return result;
    }

float sin(float f){
        float a1;
        float a2;
        float a3;
        float result=0.0;
        float i=0;
        int j=0;

        if(f==0.0){
            return 0.0;
        }
        if(f<=pi_float_value/4.0 ){
            while(j<=4)
            {
                a1=puiss(-1.0,j);
                a2=puiss(f,2*j+1);
                a3=fact(2.0*i+1.0);
                result =result+ (a1 * a2) / a3;
                i=i+1.0;
                j=j+1;

            }
        }
        if(f<=pi_float_value/2 && f>pi_float_value/4){
            return cos(pi_float_value/2-f);
        }
        if(f<0.0){
            return -sin(-f);
        }
        if(f>pi_float_value/2 && f<=pi_float_value){
            return sin(pi_float_value-f);
        }
        if(pi_float_value<f && f<2*pi_float_value){
            f=f-pi_float_value;
            return -sin(f);
        }
        if(f==2*pi_float_value){
            return 0.0;
        }
        if(f>2*pi_float_value){
            f=f-2*pi_float_value;
            return sin(f);
        }
        return result;
    }

//implementé par serie de taylor n=15 ce qui donne un polynome d'ordre 31
    float asin(float f){
        float result = 0.0;
        int i=0;
        if(f<0.0){
            f=-f;
            return -asin(f);
        }
        if (f>1.0){
            //we must use the asm function of deca that return an error
            //throw new IllegalArgumentException("valeur d'entrée out of range [-1;1]");
            println("la valeur entrée est plus grande que 1");
        }
        if(f<1/this.sqrt(2)){
            while(i<=15){
                result=result +(puiss(f,2 * i+1 )*fact(2*i)) / ( puiss(fact( i ),2)  *puiss((2),2*i)*(2*i+1) );
                i=i+1;
            }
        }
        if(f==1/this.sqrt(2)){
            return pi_float_value/4;
        }
        if(f>1/this.sqrt(2) ){//le nv f est entre [0;1/sqrt(2)] ~0.70710678118
            f= this.sqrt(1-puiss(f,2));
            return (pi_float_value/2)-asin(f);
        }

        if(fact(2*15)<0){
            println("overflow");
        }
        return result;
    }

    float atan(float x) {
        float a1 = 0.0;
        if (x < 0) {//par imparité de l'arctan
            return -atan(-x);
        }
        if (x == 0) {//afin de ne pas le laisser faire les calculs des puiss(0,n)
            return 0.0;
        }
        if(x>1){//on retourne à [0;1] à l'aide de la formule de l'arctan
            x=1/x;
            return (this.getPie()/2)-atan(x);
        }
        if(x==1){
            return this.getPie()/4;
        }
        if (x < 0.6) {
            a1=x;
            a1 = a1-puiss(x, 3) / 3;
            a1 = a1+puiss(x, 5) / 5;
            a1 = a1-puiss(x, 7) / 7;
            a1 = a1+5*puiss(x, 9) / 48;
            a1 = a1+puiss(x, 10) / 20;
            a1 = a1-43*puiss(x, 11) / 176;
            a1 = a1+puiss(x, 12) / 4;
            a1 = a1-27*puiss(x, 13) / 208;
            a1 = a1+puiss(x, 14) / 28;
            a1 = a1-puiss(x, 15) / 240;

            return a1;
        }
        if(0.6<=x && x<1){
            return atan((x+1)/(1-x))-this.getPie()/4;
        }
        return x; //on n'arrive jamais ici

    }

     float ulp(float f) {
        float resultat = 0;

        float f_abs = this.getAbs(f);
        float pwmid=0;
        float pwmin=0;
        float pwmax=0;
        int expmax = 0;
        int expmin=0;
        int expmid=0;

        if (f_abs <1.1754944e-38){//this.puiss(2, -126)
            return resultat =1.4012985e-45; //en effet Le nombre dénormalisé non nul le plus proche de zéro est ± 2^−149 ≈ ±1,4012985 * 10^−45 ;
        } 
        else{
        if (f_abs > 0.99999994039*3.4028235e+38 ) {//3.4028235e+38 et 2^127=1.7014118e+38 , on a remplace *puiss(2,128) par sa valeur, ( >(1 - puiss(2, -24)) * 3.4028237e+38 )
            return resultat = 2.028241e+31; //this.puiss(2, 104);
        }
        else { // L'exposant d'un nombre normalisé va donc de -126 à +127
            pwmin = 1.1754944e-38; //this.puiss(2, -126);
            expmin = -126;
            pwmax = 1.7014118e+38; //this.puiss(2, 127);
            expmax = 127;
            // x is between powermin = 2^expmin and powermax = 2^expmax
            while (expmax - expmin > 1) {
                expmid = (expmax + expmin) / 2;
                pwmid = puiss(2, expmid);
                if (f_abs >= pwmid) {
                    pwmin = pwmid;
                    expmin = expmid;
                } 
                else {
                    pwmax = pwmid;
                    expmax = expmid;
                }
            }


            // now, expmax - expmin = 1
            // and powermin <= x < powermax
            if (f_abs == pwmin) {
                resultat = this.puiss(2, (expmin - 24));
                resultat = resultat * 2;//Lors de nos tests on a trouvé une erreur de /2, qu'on corrigera ici
            } 
            else {
                resultat = this.puiss(2, (expmin - 23));
            }

            return resultat;
        }
        }





}

}

